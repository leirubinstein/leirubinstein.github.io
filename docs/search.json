[
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "Blog",
    "section": "",
    "text": "Thomas Fire Perimeter Visualization\n\n\n\n\n\n\nPython\n\n\nMEDS\n\n\n\nTrue and false color visualization using Landsat data\n\n\n\n\n\nDec 4, 2024\n\n\nLeilanie Rubinstein\n\n\n\n\n\n\n\n\n\n\n\n\nblog post title\n\n\n\n\n\n\nQuarto\n\n\nMEDS\n\n\n\na short catchy description of the blog post\n\n\n\n\n\nOct 18, 2024\n\n\nLeilanie Rubinstein\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Leilanie Rubinstein",
    "section": "",
    "text": "Leilanie Rubinstein earned her Bachelor of Arts in Political Science and Environmental Studies from the University of California, Santa Barbara in 2021. Inspired by Santa Barbara’s legacy of environmental activism, Leilanie has dedicated herself to running local and federal campaigns with social justice and conservation-driven values for the past seven years. Following her undergraduate degree, she worked at an environmental law firm, specializing in litigation and regulatory disputes relating to remediation of Superfund sites. Her professional experience includes roles in political organizing, legislation, and environmental law, where she honed skills in data management, community engagement, and environmental policy analysis.\nCurrently pursuing a Master of Environmental Data Science at the Bren School, Leilanie aspires to work in government or to conduct policy relevant research after graduation. She aims to leverage data science techniques to develop solutions for resource management and climate change mitigation, promoting sustainable practices and enhancing climate resilience locally and globally.\nIn her free time, Leilanie enjoys mountain biking, gaming, and exploring nature and the night sky through her camera lens."
  },
  {
    "objectID": "deletelater/practice.html",
    "href": "deletelater/practice.html",
    "title": "Here is my level one header",
    "section": "",
    "text": "Here is my level one header\nHere is my first paragraph\nHere is my second paragraph, where you can read more about MEDS.\nThis is very important text!"
  },
  {
    "objectID": "posts/2024-12-04-thomas-fire-visualization/thomas-fire-blogpost.html",
    "href": "posts/2024-12-04-thomas-fire-visualization/thomas-fire-blogpost.html",
    "title": "Thomas Fire Perimeter Visualization",
    "section": "",
    "text": "Purpose: Here we use historical fire perimeter data from CalFire to obtain the perimeter of the 2017 Thomas Fire. The, using provided Landsat imagery and the fire perimeter, we create a map showing the perimeter of the 2017 Thomas Fire in relation to Santa Barbara County.\nHighlights: - Cleaning data - Label-based selection - Geospatial file creation - rioxarray raster file manipulation - True color imagery plotting - False color imagery plotting\nDataset Descriptions: The landsat data is a simplified collection of bands from the Landsat Collection 2 Level-2 atmosperically corrected surface reflectance data, collected by the Landsat 8 satellite. This data was retrieved from the Microsoft Planetary Computer data catalogue and pre-processed to remove data outside land and coarsen the spatial resolution.\nCalifornia’s Fire and Resource Assessment Program (FRAP) maintains a comprehensive database of historical fire perimeters throughout the state, covering both public and private lands. This GIS dataset is updated annually through a collaborative effort between FRAP and several federal agencies - the U.S. Forest Service Region 5, Bureau of Land Management, National Park Service, and Fish and Wildlife Service.\nReferences: - Fire Resource and Assessment Program. (2024). Historical Fire Perimeters CalFire. https://www.fire.ca.gov/what-we-do/fire-resource-assessment-program/fire-perimeters - NASA Landsat 8 (2024). Landsat Collection 2 Level-2 Science Products Microsoft Planetary Computer. https://planetarycomputer.microsoft.com/dataset/landsat-c2-l2\n\nimport os\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport geopandas as gpd\nimport xarray as xr\nimport rioxarray as rioxr\n\n\n# Load fire perimeter data\nfire_perimeter = gpd.read_file(os.path.join('data',\n                                            'fire23_1.gdb'))\nfire_perimeter.head()\nfire_perimeter.columns = fire_perimeter.columns.str.lower()\n\n\nprint(f\"Fire Perimeter CRS: {fire_perimeter.crs} \\nIs this projected?: {fire_perimeter.crs.is_projected}\")\n\nFire Perimeter CRS: epsg:3310 \nIs this projected?: True\n\n\nHere we obtain the coordinate reference system (EPSG:3310) of the fire perimeter data. This CRS is projected.\n\n# Filter to the 2017 Thomas Fire\nthomasfire = fire_perimeter.loc[(fire_perimeter['fire_name'] == 'THOMAS') & \n                                (fire_perimeter['year_'] == 2017)]\n\n# Plot the perimeter\nfig, ax = plt.subplots(figsize = (10,8))\nax.axis('off')\nthomasfire.plot(ax=ax)\nplt.tight_layout()\nplt.subplots_adjust(bottom = 0.05)\nax.set_title('Thomas Fire (2017) Perimeter Mask')\nplt.figtext(0.01, 0.15, \"Data: CalFire\", ha=\"left\", fontsize=10)\nplt.show()\n\n\n\n\n\n\n\n\n\n# Save file to the data folder in `.geojson` format.\nthomasfire.to_file('data/thomasfire.geojson', driver='GeoJSON')\n\nGeoJSON is an open standard format that can represent a variety of geometries.\nThe landsat data is accessed from workbench-1 at:\n/courses/EDS220/data/hwk4_landsat_data landsat8-2018-01-26-sb-simplified.nc\n\n# Import data\nroot = os.path.join('/',\n                   'courses',\n                   'EDS220',\n                   'data',\n                   'hwk4_landsat_data')\n\nfp = os.path.join(root, 'landsat8-2018-01-26-sb-simplified.nc')\n\nlandsat = rioxr.open_rasterio(fp)\n\n\n\n\n\n# Check CRS of data and dimensions\nprint(\n    f\"{'Landsat 8 CRS:':&lt;25} {landsat.rio.crs}\\n\"\n    f\"{'Is it projected?':&lt;25} {landsat.rio.crs.is_projected}\\n\"\n    f\"{'Sizes of dimensions:':&lt;25} {dict(landsat.sizes)}\")\n\nLandsat 8 CRS:            EPSG:32611\nIs it projected?          True\nSizes of dimensions:      {'y': 731, 'x': 870, 'band': 1}\n\n\n\nprint(landsat)\n\n&lt;xarray.Dataset&gt;\nDimensions:      (y: 731, x: 870, band: 1)\nCoordinates:\n  * y            (y) float64 3.952e+06 3.952e+06 ... 3.756e+06 3.755e+06\n  * x            (x) float64 1.213e+05 1.216e+05 ... 3.557e+05 3.559e+05\n  * band         (band) int64 1\n    spatial_ref  int64 0\nData variables:\n    red          (band, y, x) float64 ...\n    green        (band, y, x) float64 ...\n    blue         (band, y, x) float64 ...\n    nir08        (band, y, x) float64 ...\n    swir22       (band, y, x) float64 ...\n\n\nThe landsat dataset has three dimensions: band, x, and y; it has variables for red, green, blue, near infrared 0.8, and short-wave infrared 2,2 bands. The coordinate reference system is EPSG: 32611, and is projected.\n\n# Drop the band dimension of the data\nlandsat = landsat.squeeze().drop_vars('band')\n\n\n\n\n\n# Select the red, green, and blue vairables of the dataset, then convert to array and plot\nlandsat[['red', 'green', 'blue']].to_array().plot.imshow()\n\nClipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).\n\n\n\n\n\n\n\n\n\n\n# Set `robust=True` for better color scale while plotting\nlandsat[['red', 'green', 'blue']].to_array().plot.imshow(robust = True)\n\n\n\n\n\n\n\n\nPassing the robust=True parameter in plt.imshow prevents outliers from washing out the color scale of the blot. robust=True uses the 2nd and 98th percentiles of the data to compute the color limits. The adjusted output takes into account that the RGB values of the clouds are outliers.\n\n\n\n\n# Create a simple false color image plot using short-wave infrared, near-infrared, and red variables\nlandsat[['swir22', 'nir08', 'red']].to_array().plot.imshow(robust = True)\n\n\n\n\n\n\n\n\n\n\n\n\n# Import Thomas Fire perimeter\nthomasfire = gpd.read_file(os.path.join('data','thomasfire.geojson'))\n\n# Transform the Landsat CRS to match the fire perimeter CRS\nthomasfire.crs\nlandsat = landsat.rio.reproject(\"EPSG:3310\")\nassert landsat.rio.crs == thomasfire.crs\n\n\n# Create a false color image and clip it for plotting\nfalsecolor_thomasfire = landsat[['swir22', 'nir08', 'red']].to_array()\n\nfalsecolor_clip = falsecolor_thomasfire.rio.clip_box(*thomasfire.total_bounds)\n\n\n# Create a map showing the false color image together with the Thomas Fire perimeter.\nfig, ax = plt.subplots(figsize = (10,8))\n\nax.axis('off')\n\nfalsecolor_thomasfire.plot.imshow(ax = ax,\n                                  robust = True)\nthomasfire.plot(ax = ax,\n                alpha = 0.4,\n                column=\"fire_name\",\n                edgecolor = 'darkred',\n                legend = True,\n                legend_kwds={'title': \"Fire Perimeter\",\n                                    'fontsize':'small'})\nplt.tight_layout()\nplt.subplots_adjust(bottom=0.05)\n\nax.set_title('Thomas Fire (2017) Perimeter Map')\n\nplt.figtext(0.01, 0.015, \"Data: NASA Landsat & CalFire\", ha=\"left\", fontsize=10)\n\nplt.show()\n\n\n\n\n\n\n\n\n\n# Create a clipped map showing the false color image and the Thomas Fire perimeter\nfig, ax = plt.subplots(figsize = (10,8))\n\nax.axis('off')\n\nfalsecolor_clip.plot.imshow(ax = ax,\n                            robust = True)\nthomasfire.plot(ax = ax,\n                column = \"fire_name\",\n                alpha = 0.4,\n                edgecolor = 'darkred',\n                legend = True,\n                legend_kwds = {'title': \"Fire Perimeter\", \n                               'fontsize':'small'})\n\nplt.tight_layout()\nplt.subplots_adjust(bottom = 0.05)\n\nax.set_title('Thomas Fire (2017) Perimeter - Clipped Map')\n\nplt.figtext(0.01, 0.12, \"Data: NASA Landsat & CalFire\", ha=\"left\", fontsize=10)\n\nplt.show()\n\n\n\n\n\n\n\n\nThe above maps use false color satellite imagery to display the burn scar from the 2017 Thomas Fire and its perimeter. Shortwave infrared (SWIR) is plotted in red, near infrared (NIR) in green, and the red band in blue. Newly burned soil reflects SWIR light strongly, and plants containing water reflect NIR strongly, which makes this false color image helpful for visualizing fire effects."
  },
  {
    "objectID": "posts/2024-12-04-thomas-fire-visualization/thomas-fire-blogpost.html#about",
    "href": "posts/2024-12-04-thomas-fire-visualization/thomas-fire-blogpost.html#about",
    "title": "Thomas Fire Perimeter Visualization",
    "section": "",
    "text": "Purpose: Here we use historical fire perimeter data from CalFire to obtain the perimeter of the 2017 Thomas Fire. The, using provided Landsat imagery and the fire perimeter, we create a map showing the perimeter of the 2017 Thomas Fire in relation to Santa Barbara County.\nHighlights: - Cleaning data - Label-based selection - Geospatial file creation - rioxarray raster file manipulation - True color imagery plotting - False color imagery plotting\nDataset Descriptions: The landsat data is a simplified collection of bands from the Landsat Collection 2 Level-2 atmosperically corrected surface reflectance data, collected by the Landsat 8 satellite. This data was retrieved from the Microsoft Planetary Computer data catalogue and pre-processed to remove data outside land and coarsen the spatial resolution.\nCalifornia’s Fire and Resource Assessment Program (FRAP) maintains a comprehensive database of historical fire perimeters throughout the state, covering both public and private lands. This GIS dataset is updated annually through a collaborative effort between FRAP and several federal agencies - the U.S. Forest Service Region 5, Bureau of Land Management, National Park Service, and Fish and Wildlife Service.\nReferences: - Fire Resource and Assessment Program. (2024). Historical Fire Perimeters CalFire. https://www.fire.ca.gov/what-we-do/fire-resource-assessment-program/fire-perimeters - NASA Landsat 8 (2024). Landsat Collection 2 Level-2 Science Products Microsoft Planetary Computer. https://planetarycomputer.microsoft.com/dataset/landsat-c2-l2\n\nimport os\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport geopandas as gpd\nimport xarray as xr\nimport rioxarray as rioxr\n\n\n# Load fire perimeter data\nfire_perimeter = gpd.read_file(os.path.join('data',\n                                            'fire23_1.gdb'))\nfire_perimeter.head()\nfire_perimeter.columns = fire_perimeter.columns.str.lower()\n\n\nprint(f\"Fire Perimeter CRS: {fire_perimeter.crs} \\nIs this projected?: {fire_perimeter.crs.is_projected}\")\n\nFire Perimeter CRS: epsg:3310 \nIs this projected?: True\n\n\nHere we obtain the coordinate reference system (EPSG:3310) of the fire perimeter data. This CRS is projected.\n\n# Filter to the 2017 Thomas Fire\nthomasfire = fire_perimeter.loc[(fire_perimeter['fire_name'] == 'THOMAS') & \n                                (fire_perimeter['year_'] == 2017)]\n\n# Plot the perimeter\nfig, ax = plt.subplots(figsize = (10,8))\nax.axis('off')\nthomasfire.plot(ax=ax)\nplt.tight_layout()\nplt.subplots_adjust(bottom = 0.05)\nax.set_title('Thomas Fire (2017) Perimeter Mask')\nplt.figtext(0.01, 0.15, \"Data: CalFire\", ha=\"left\", fontsize=10)\nplt.show()\n\n\n\n\n\n\n\n\n\n# Save file to the data folder in `.geojson` format.\nthomasfire.to_file('data/thomasfire.geojson', driver='GeoJSON')\n\nGeoJSON is an open standard format that can represent a variety of geometries.\nThe landsat data is accessed from workbench-1 at:\n/courses/EDS220/data/hwk4_landsat_data landsat8-2018-01-26-sb-simplified.nc\n\n# Import data\nroot = os.path.join('/',\n                   'courses',\n                   'EDS220',\n                   'data',\n                   'hwk4_landsat_data')\n\nfp = os.path.join(root, 'landsat8-2018-01-26-sb-simplified.nc')\n\nlandsat = rioxr.open_rasterio(fp)"
  },
  {
    "objectID": "posts/2024-12-04-thomas-fire-visualization/thomas-fire-blogpost.html#preliminary-data-exploration",
    "href": "posts/2024-12-04-thomas-fire-visualization/thomas-fire-blogpost.html#preliminary-data-exploration",
    "title": "Thomas Fire Perimeter Visualization",
    "section": "",
    "text": "# Check CRS of data and dimensions\nprint(\n    f\"{'Landsat 8 CRS:':&lt;25} {landsat.rio.crs}\\n\"\n    f\"{'Is it projected?':&lt;25} {landsat.rio.crs.is_projected}\\n\"\n    f\"{'Sizes of dimensions:':&lt;25} {dict(landsat.sizes)}\")\n\nLandsat 8 CRS:            EPSG:32611\nIs it projected?          True\nSizes of dimensions:      {'y': 731, 'x': 870, 'band': 1}\n\n\n\nprint(landsat)\n\n&lt;xarray.Dataset&gt;\nDimensions:      (y: 731, x: 870, band: 1)\nCoordinates:\n  * y            (y) float64 3.952e+06 3.952e+06 ... 3.756e+06 3.755e+06\n  * x            (x) float64 1.213e+05 1.216e+05 ... 3.557e+05 3.559e+05\n  * band         (band) int64 1\n    spatial_ref  int64 0\nData variables:\n    red          (band, y, x) float64 ...\n    green        (band, y, x) float64 ...\n    blue         (band, y, x) float64 ...\n    nir08        (band, y, x) float64 ...\n    swir22       (band, y, x) float64 ...\n\n\nThe landsat dataset has three dimensions: band, x, and y; it has variables for red, green, blue, near infrared 0.8, and short-wave infrared 2,2 bands. The coordinate reference system is EPSG: 32611, and is projected.\n\n# Drop the band dimension of the data\nlandsat = landsat.squeeze().drop_vars('band')"
  },
  {
    "objectID": "posts/2024-12-04-thomas-fire-visualization/thomas-fire-blogpost.html#true-color-image",
    "href": "posts/2024-12-04-thomas-fire-visualization/thomas-fire-blogpost.html#true-color-image",
    "title": "Thomas Fire Perimeter Visualization",
    "section": "",
    "text": "# Select the red, green, and blue vairables of the dataset, then convert to array and plot\nlandsat[['red', 'green', 'blue']].to_array().plot.imshow()\n\nClipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).\n\n\n\n\n\n\n\n\n\n\n# Set `robust=True` for better color scale while plotting\nlandsat[['red', 'green', 'blue']].to_array().plot.imshow(robust = True)\n\n\n\n\n\n\n\n\nPassing the robust=True parameter in plt.imshow prevents outliers from washing out the color scale of the blot. robust=True uses the 2nd and 98th percentiles of the data to compute the color limits. The adjusted output takes into account that the RGB values of the clouds are outliers."
  },
  {
    "objectID": "posts/2024-12-04-thomas-fire-visualization/thomas-fire-blogpost.html#false-color-image",
    "href": "posts/2024-12-04-thomas-fire-visualization/thomas-fire-blogpost.html#false-color-image",
    "title": "Thomas Fire Perimeter Visualization",
    "section": "",
    "text": "# Create a simple false color image plot using short-wave infrared, near-infrared, and red variables\nlandsat[['swir22', 'nir08', 'red']].to_array().plot.imshow(robust = True)"
  },
  {
    "objectID": "posts/2024-12-04-thomas-fire-visualization/thomas-fire-blogpost.html#maps",
    "href": "posts/2024-12-04-thomas-fire-visualization/thomas-fire-blogpost.html#maps",
    "title": "Thomas Fire Perimeter Visualization",
    "section": "",
    "text": "# Import Thomas Fire perimeter\nthomasfire = gpd.read_file(os.path.join('data','thomasfire.geojson'))\n\n# Transform the Landsat CRS to match the fire perimeter CRS\nthomasfire.crs\nlandsat = landsat.rio.reproject(\"EPSG:3310\")\nassert landsat.rio.crs == thomasfire.crs\n\n\n# Create a false color image and clip it for plotting\nfalsecolor_thomasfire = landsat[['swir22', 'nir08', 'red']].to_array()\n\nfalsecolor_clip = falsecolor_thomasfire.rio.clip_box(*thomasfire.total_bounds)\n\n\n# Create a map showing the false color image together with the Thomas Fire perimeter.\nfig, ax = plt.subplots(figsize = (10,8))\n\nax.axis('off')\n\nfalsecolor_thomasfire.plot.imshow(ax = ax,\n                                  robust = True)\nthomasfire.plot(ax = ax,\n                alpha = 0.4,\n                column=\"fire_name\",\n                edgecolor = 'darkred',\n                legend = True,\n                legend_kwds={'title': \"Fire Perimeter\",\n                                    'fontsize':'small'})\nplt.tight_layout()\nplt.subplots_adjust(bottom=0.05)\n\nax.set_title('Thomas Fire (2017) Perimeter Map')\n\nplt.figtext(0.01, 0.015, \"Data: NASA Landsat & CalFire\", ha=\"left\", fontsize=10)\n\nplt.show()\n\n\n\n\n\n\n\n\n\n# Create a clipped map showing the false color image and the Thomas Fire perimeter\nfig, ax = plt.subplots(figsize = (10,8))\n\nax.axis('off')\n\nfalsecolor_clip.plot.imshow(ax = ax,\n                            robust = True)\nthomasfire.plot(ax = ax,\n                column = \"fire_name\",\n                alpha = 0.4,\n                edgecolor = 'darkred',\n                legend = True,\n                legend_kwds = {'title': \"Fire Perimeter\", \n                               'fontsize':'small'})\n\nplt.tight_layout()\nplt.subplots_adjust(bottom = 0.05)\n\nax.set_title('Thomas Fire (2017) Perimeter - Clipped Map')\n\nplt.figtext(0.01, 0.12, \"Data: NASA Landsat & CalFire\", ha=\"left\", fontsize=10)\n\nplt.show()\n\n\n\n\n\n\n\n\nThe above maps use false color satellite imagery to display the burn scar from the 2017 Thomas Fire and its perimeter. Shortwave infrared (SWIR) is plotted in red, near infrared (NIR) in green, and the red band in blue. Newly burned soil reflects SWIR light strongly, and plants containing water reflect NIR strongly, which makes this false color image helpful for visualizing fire effects."
  },
  {
    "objectID": "posts/2024-10-18-my-first-post/index.html",
    "href": "posts/2024-10-18-my-first-post/index.html",
    "title": "blog post title",
    "section": "",
    "text": "I’m going to insert a footnote here1"
  },
  {
    "objectID": "posts/2024-10-18-my-first-post/index.html#this-is-my-first-section",
    "href": "posts/2024-10-18-my-first-post/index.html#this-is-my-first-section",
    "title": "blog post title",
    "section": "",
    "text": "I’m going to insert a footnote here1"
  },
  {
    "objectID": "posts/2024-10-18-my-first-post/index.html#this-is-my-second-section",
    "href": "posts/2024-10-18-my-first-post/index.html#this-is-my-second-section",
    "title": "blog post title",
    "section": "this is my second section",
    "text": "this is my second section\nHere’s my next paragraph2\nI’m citing Sam [1]\n\n\n\n\n\n\n\n\n\npractice citation[2]"
  },
  {
    "objectID": "posts/2024-10-18-my-first-post/index.html#footnotes",
    "href": "posts/2024-10-18-my-first-post/index.html#footnotes",
    "title": "blog post title",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nHere is a new footnote↩︎\nHere is my second footnote↩︎"
  },
  {
    "objectID": "photography.html",
    "href": "photography.html",
    "title": "Photography",
    "section": "",
    "text": "Santa Cruz Island, Channel Islands National Park\n\n\n\n\n\nPalm Springs, CA\n\n\n\n\n\nSanta Cruz Island, Channel Islands National Park\nPalm Springs, CA"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "some text"
  },
  {
    "objectID": "about.html#what-i-do-for-work",
    "href": "about.html#what-i-do-for-work",
    "title": "About",
    "section": "",
    "text": "some text"
  },
  {
    "objectID": "about.html#what-i-do-for-fun",
    "href": "about.html#what-i-do-for-fun",
    "title": "About",
    "section": "What I do for fun",
    "text": "What I do for fun\n\ngive the people what they want!\n\nhere is some more text [.center-spacecadet]\n\nhere is a line\nhere is another line"
  }
]